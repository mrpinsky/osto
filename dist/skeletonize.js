"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ossify_1 = require("./ossify");
function isolateNewlines(ops) {
    return ops.reduce(function (acc, curr) {
        if (typeof curr.insert === 'string' && curr.insert !== '\n') {
            var preMatch = curr.insert.match(/[^\n]/);
            var postMatch = curr.insert.match(/[^\n]\n*$/);
            var nLsBefore = preMatch ? preMatch.index : 0;
            var nLsAfter = postMatch ? curr.insert.length - postMatch.index - 1 : 0;
            new Array(nLsBefore)
                .fill({ insert: '\n', attributes: {} })
                .forEach(function (v) { return acc.push(v); });
            var trimmed = curr.insert.replace(/^\n+|\n+$/g, '');
            var split_1 = trimmed.split('\n');
            split_1.forEach(function (line, index) {
                if (line.length > 0) {
                    acc.push({ insert: line, attributes: curr.attributes || {} });
                }
                if (index < split_1.length - 1) {
                    acc.push({ insert: '\n', attributes: {} });
                }
            });
            new Array(nLsAfter)
                .fill({ insert: '\n', attributes: {} })
                .forEach(function (v) { return acc.push(v); });
        }
        else {
            acc.push(Object.assign({ attributes: {} }, curr));
        }
        return acc;
    }, []);
}
exports.isolateNewlines = isolateNewlines;
function skeletonize(delta) {
    var linedOps = isolateNewlines(delta.ops);
    var skeleton = [];
    var buffer = [];
    for (var _i = 0, linedOps_1 = linedOps; _i < linedOps_1.length; _i++) {
        var op = linedOps_1[_i];
        if (typeof op.insert === 'string') {
            if (op.insert === '\n') {
                if (op.attributes && op.attributes.list) {
                    var last = skeleton[skeleton.length - 1];
                    if (last &&
                        last.type === 'list' &&
                        last.list === op.attributes.list) {
                        last.items.push(buffer);
                    }
                    else {
                        if (op.attributes.list === 'ordered') {
                            skeleton.push({
                                type: 'list',
                                items: [buffer],
                                list: op.attributes.list,
                            });
                        }
                        else if (op.attributes.list === 'bullet') {
                            skeleton.push({
                                type: 'list',
                                items: [buffer],
                                list: op.attributes.list,
                            });
                        }
                    }
                }
                else {
                    if (skeleton.length === 0 ||
                        skeleton[skeleton.length - 1].type !== 'image') {
                        skeleton.push({ type: 'p', contents: buffer });
                    }
                }
                buffer = [];
            }
            else {
                buffer.push(ossify_1.ossify(op));
            }
        }
        else if (op.insert.image) {
            skeleton.push({
                type: 'image',
                ref: op.insert.image,
            });
        }
        else {
            buffer.push(ossify_1.ossify(op));
        }
    }
    if (buffer.length > 0) {
        skeleton.push({ type: 'p', contents: buffer });
    }
    return skeleton;
}
exports.skeletonize = skeletonize;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
