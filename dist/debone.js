"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tags = {
    bold: 'strong',
    italic: 'em',
    underline: 'u',
    superscript: 'sup',
    subscript: 'sub',
    strikethrough: 's',
};
function deboneText(bone, format) {
    if (format === void 0) { format = 'html'; }
    var retVal = bone.text
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');
    if (format === 'html' && 'attributes' in bone) {
        var color = bone.attributes.color;
        var colorStyle = color ? "color: " + color + ";" : '';
        var background = bone.attributes.background;
        var backgroundStyle = background
            ? "background-color: " + background + ";"
            : '';
        if (colorStyle.length + backgroundStyle.length > 0) {
            retVal = "<span style=\"" + (colorStyle + backgroundStyle) + "\">" + retVal + "</span>";
        }
        for (var attribute in bone.attributes) {
            if (bone.attributes[attribute]) {
                if (attribute in exports.tags) {
                    var tag = exports.tags[attribute];
                    retVal = "<" + tag + ">" + retVal + "</" + tag + ">";
                }
                else if (attribute === 'script') {
                    var tag = exports.tags[bone.attributes.script + 'script'];
                    retVal = "<" + tag + ">" + retVal + "</" + tag + ">";
                }
                else if (attribute === 'link') {
                    retVal = "<a href=\"" + bone.attributes.link + "\">" + retVal + "</a>";
                }
            }
        }
    }
    return retVal;
}
exports.deboneText = deboneText;
function deboneHashtag(bone, format) {
    return deboneText({ type: 'text', text: "#" + bone.tag, attributes: bone.attributes }, format);
}
exports.deboneHashtag = deboneHashtag;
function deboneAtMention(bone, format) {
    return deboneText({ type: 'text', text: "@id:" + bone.id, attributes: bone.attributes }, format);
}
exports.deboneAtMention = deboneAtMention;
function deboneInline(bone, format) {
    switch (bone.type) {
        case 'text':
            return deboneText(bone, format);
        case 'hashtag':
            return deboneHashtag(bone, format);
        case 'at':
            return deboneAtMention(bone, format);
        default:
            (function (x) {
                throw new Error("Invalid inline bone: " + bone);
            })(bone);
    }
}
exports.deboneInline = deboneInline;
function deboneP(p, format) {
    var contents = p.contents
        .map(function (bone) { return deboneInline(bone, format); })
        .reduce(function (acc, curr) { return acc.concat(curr); });
    return format === 'html' ? "<p>" + contents + "</p>" : contents;
}
exports.deboneP = deboneP;
function deboneList(list, format) {
    var items = list.items.map(function (item, index) {
        var li = item.map(function (bone) { return deboneInline(bone, format); }).join('');
        if (format === 'html') {
            return "<li>" + li + "</li>";
        }
        else {
            return "  " + (list.list === 'ordered' ? index + '.' : '-') + " " + li;
        }
    });
    if (format === 'html') {
        var tag = list.list === 'ordered' ? 'ol' : 'ul';
        return "<" + tag + ">" + items.join('') + "</" + tag + ">";
    }
    else {
        return items.join('\n');
    }
}
exports.deboneList = deboneList;
function deboneImage(image, format) {
    return "IMAGE {image.ref}";
}
exports.deboneImage = deboneImage;
function debone(skeleton, format) {
    return skeleton
        .map(function (bone) {
        switch (bone.type) {
            case 'p':
                return deboneP(bone, format);
            case 'list':
                return deboneList(bone, format);
            case 'image':
                return deboneImage(bone, format);
            default:
                return (function (x) {
                    throw new Error("Invalid block bone: " + bone);
                })(bone);
        }
    })
        .join('');
}
exports.debone = debone;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
